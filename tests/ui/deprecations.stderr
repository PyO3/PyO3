error: use of deprecated constant `pyo3::deprecations::PYMETHODS_NEW_DEPRECATED_FORM`: use `#[new]` instead of `#[__new__]`
  --> tests/ui/deprecations.rs:12:7
   |
12 |     #[__new__]
   |       ^^^^^^^
   |
note: the lint level is defined here
  --> tests/ui/deprecations.rs:1:9
   |
1  | #![deny(deprecated)]
   |         ^^^^^^^^^^

error: use of deprecated function `pyo3::deprecations::deprecate_implicit_option`: Implicit default for trailing optional arguments is phased out. Add an explicit `#[pyo3(signature = (...))]` attribute a to silence this warning. In a future pyo3 version `Option<..>` arguments will be treated the same as any other argument.
   --> tests/ui/deprecations.rs:125:39
    |
125 | fn pyfunction_option_2(_i: u32, _any: Option<i32>) {}
    |                                       ^^^^^^

error: use of deprecated method `pyo3::deprecations::GilRefs::<T>::from_py_with_arg`: use `&Bound<'_, PyAny>` as the argument for this `from_py_with` extractor
  --> tests/ui/deprecations.rs:42:44
   |
42 |     fn __eq__(&self, #[pyo3(from_py_with = "extract_gil_ref")] _other: i32) -> bool {
   |                                            ^^^^^^^^^^^^^^^^^

error: use of deprecated method `pyo3::deprecations::GilRefs::<T>::function_arg`: use `&Bound<'_, T>` instead for this function argument
  --> tests/ui/deprecations.rs:18:33
   |
18 |     fn cls_method_gil_ref(_cls: &PyType) {}
   |                                 ^

error: use of deprecated method `pyo3::deprecations::GilRefs::<T>::function_arg`: use `&Bound<'_, T>` instead for this function argument
  --> tests/ui/deprecations.rs:23:29
   |
23 |     fn method_gil_ref(_slf: &PyCell<Self>) {}
   |                             ^

error: use of deprecated method `pyo3::deprecations::GilRefs::<T>::function_arg`: use `&Bound<'_, T>` instead for this function argument
  --> tests/ui/deprecations.rs:28:36
   |
28 |     fn static_method_gil_ref(_any: &PyAny) {}
   |                                    ^

error: use of deprecated method `pyo3::deprecations::GilRefs::<T>::from_py_with_arg`: use `&Bound<'_, PyAny>` as the argument for this `from_py_with` extractor
  --> tests/ui/deprecations.rs:31:53
   |
31 |     fn set_foo_gil_ref(&self, #[pyo3(from_py_with = "extract_gil_ref")] _value: i32) {}
   |                                                     ^^^^^^^^^^^^^^^^^

error: use of deprecated method `pyo3::deprecations::GilRefs::<T>::function_arg`: use `&Bound<'_, T>` instead for this function argument
  --> tests/ui/deprecations.rs:37:39
   |
37 |     fn set_bar_gil_ref(&self, _value: &PyAny) {}
   |                                       ^

error: use of deprecated method `pyo3::deprecations::GilRefs::<T>::function_arg`: use `&Bound<'_, T>` instead for this function argument
  --> tests/ui/deprecations.rs:61:44
   |
61 | fn pyfunction_with_module_gil_ref(_module: &PyModule) -> PyResult<&str> {
   |                                            ^

error: use of deprecated method `pyo3::deprecations::GilRefs::<T>::function_arg`: use `&Bound<'_, T>` instead for this function argument
  --> tests/ui/deprecations.rs:71:19
   |
71 | fn module_gil_ref(_m: &PyModule) -> PyResult<()> {
   |                   ^^

error: use of deprecated method `pyo3::deprecations::GilRefs::<T>::function_arg`: use `&Bound<'_, T>` instead for this function argument
  --> tests/ui/deprecations.rs:76:57
   |
76 | fn module_gil_ref_with_explicit_py_arg(_py: Python<'_>, _m: &PyModule) -> PyResult<()> {
   |                                                         ^^

error: use of deprecated method `pyo3::deprecations::GilRefs::<T>::from_py_with_arg`: use `&Bound<'_, PyAny>` as the argument for this `from_py_with` extractor
   --> tests/ui/deprecations.rs:108:27
    |
108 |     #[pyo3(from_py_with = "extract_gil_ref")] _gil_ref: i32,
    |                           ^^^^^^^^^^^^^^^^^

error: use of deprecated method `pyo3::deprecations::GilRefs::<T>::function_arg`: use `&Bound<'_, T>` instead for this function argument
   --> tests/ui/deprecations.rs:114:29
    |
114 | fn pyfunction_gil_ref(_any: &PyAny) {}
    |                             ^

error: use of deprecated method `pyo3::deprecations::OptionGilRefs::<std::option::Option<T>>::function_arg`: use `Option<&Bound<'_, T>>` instead for this function argument
   --> tests/ui/deprecations.rs:118:36
    |
118 | fn pyfunction_option_gil_ref(_any: Option<&PyAny>) {}
    |                                    ^^^^^^

error: use of deprecated method `pyo3::deprecations::GilRefs::<T>::from_py_with_arg`: use `&Bound<'_, PyAny>` as the argument for this `from_py_with` extractor
   --> tests/ui/deprecations.rs:132:27
    |
132 |     #[pyo3(from_py_with = "PyAny::len", item("my_object"))]
    |                           ^^^^^^^^^^^^

error: use of deprecated method `pyo3::deprecations::GilRefs::<T>::from_py_with_arg`: use `&Bound<'_, PyAny>` as the argument for this `from_py_with` extractor
   --> tests/ui/deprecations.rs:142:27
    |
142 |     #[pyo3(from_py_with = "PyAny::len")] usize,
    |                           ^^^^^^^^^^^^

error: use of deprecated method `pyo3::deprecations::GilRefs::<T>::from_py_with_arg`: use `&Bound<'_, PyAny>` as the argument for this `from_py_with` extractor
   --> tests/ui/deprecations.rs:148:31
    |
148 |     Zip(#[pyo3(from_py_with = "extract_gil_ref")] i32),
    |                               ^^^^^^^^^^^^^^^^^

error: use of deprecated method `pyo3::deprecations::GilRefs::<T>::from_py_with_arg`: use `&Bound<'_, PyAny>` as the argument for this `from_py_with` extractor
   --> tests/ui/deprecations.rs:155:27
    |
155 |     #[pyo3(from_py_with = "extract_gil_ref")]
    |                           ^^^^^^^^^^^^^^^^^

error: use of deprecated method `pyo3::deprecations::GilRefs::<pyo3::Python<'_>>::is_python`: use `wrap_pyfunction_bound!` instead
   --> tests/ui/deprecations.rs:168:13
    |
168 |     let _ = wrap_pyfunction!(double, py);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the macro `wrap_pyfunction` (in Nightly builds, run with -Z macro-backtrace for more info)
