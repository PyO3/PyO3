error: expected one of: `crate`, `dict`, `eq`, `eq_int`, `extends`, `freelist`, `frozen`, `get_all`, `hash`, `mapping`, `module`, `name`, `ord`, `rename_all`, `sequence`, `set_all`, `str`, `subclass`, `unsendable`, `weakref`
 --> tests/ui/invalid_pyclass_args.rs:5:11
  |
5 | #[pyclass(extend=pyo3::types::PyDict)]
  |           ^^^^^^

error: expected identifier
 --> tests/ui/invalid_pyclass_args.rs:8:21
  |
8 | #[pyclass(extends = "PyDict")]
  |                     ^^^^^^^^

error: expected string literal
  --> tests/ui/invalid_pyclass_args.rs:11:18
   |
11 | #[pyclass(name = m::MyClass)]
   |                  ^

error: expected a single identifier in double quotes
  --> tests/ui/invalid_pyclass_args.rs:14:18
   |
14 | #[pyclass(name = "Custom Name")]
   |                  ^^^^^^^^^^^^^

error: expected string literal
  --> tests/ui/invalid_pyclass_args.rs:17:18
   |
17 | #[pyclass(name = CustomName)]
   |                  ^^^^^^^^^^

error: expected string literal
  --> tests/ui/invalid_pyclass_args.rs:20:24
   |
20 | #[pyclass(rename_all = camelCase)]
   |                        ^^^^^^^^^

error: expected a valid renaming rule, possible values are: "camelCase", "kebab-case", "lowercase", "PascalCase", "SCREAMING-KEBAB-CASE", "SCREAMING_SNAKE_CASE", "snake_case", "UPPERCASE"
  --> tests/ui/invalid_pyclass_args.rs:23:24
   |
23 | #[pyclass(rename_all = "Camel-Case")]
   |                        ^^^^^^^^^^^^

error: expected string literal
  --> tests/ui/invalid_pyclass_args.rs:26:20
   |
26 | #[pyclass(module = my_module)]
   |                    ^^^^^^^^^

error: expected one of: `crate`, `dict`, `eq`, `eq_int`, `extends`, `freelist`, `frozen`, `get_all`, `hash`, `mapping`, `module`, `name`, `ord`, `rename_all`, `sequence`, `set_all`, `str`, `subclass`, `unsendable`, `weakref`
  --> tests/ui/invalid_pyclass_args.rs:29:11
   |
29 | #[pyclass(weakrev)]
   |           ^^^^^^^

error: a `#[pyclass]` cannot be both a `mapping` and a `sequence`
  --> tests/ui/invalid_pyclass_args.rs:33:8
   |
33 | struct CannotBeMappingAndSequence {}
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: `eq_int` can only be used on simple enums.
  --> tests/ui/invalid_pyclass_args.rs:54:11
   |
54 | #[pyclass(eq_int)]
   |           ^^^^^^

error: The `hash` option requires the `frozen` option.
  --> tests/ui/invalid_pyclass_args.rs:61:11
   |
61 | #[pyclass(hash)]
   |           ^^^^

error: The `hash` option requires the `eq` option.
  --> tests/ui/invalid_pyclass_args.rs:61:11
   |
61 | #[pyclass(hash)]
   |           ^^^^

error: The `ord` option requires the `eq` option.
  --> tests/ui/invalid_pyclass_args.rs:76:11
   |
76 | #[pyclass(ord)]
   |           ^^^

error: expected one of: `get`, `set`, `name`
  --> tests/ui/invalid_pyclass_args.rs:83:12
   |
83 |     #[pyo3(foo)]
   |            ^^^

error: expected one of: `get`, `set`, `name`
  --> tests/ui/invalid_pyclass_args.rs:84:12
   |
84 |     #[pyo3(blah)]
   |            ^^^^

error: expected one of: `get`, `set`, `name`
  --> tests/ui/invalid_pyclass_args.rs:86:12
   |
86 |     #[pyo3(pop)]
   |            ^^^

error: invalid format string: expected `}` but string was terminated
   --> tests/ui/invalid_pyclass_args.rs:106:19
    |
106 | #[pyclass(str = "{")]
    |                  -^ expected `}` in format string
    |                  |
    |                  because of this opening brace
    |
    = note: if you intended to print `{`, you can escape it using `{{`

error: invalid format string: expected `}`, found `$`
   --> tests/ui/invalid_pyclass_args.rs:110:19
    |
110 | #[pyclass(str = "{$}")]
    |                  -^ expected `}` in format string
    |                  |
    |                  because of this opening brace
    |
    = note: if you intended to print `{`, you can escape it using `{{`

error: The format string syntax is incompatible with any renaming via `name` or `rename_all`
   --> tests/ui/invalid_pyclass_args.rs:134:1
    |
134 | #[pyclass(name = "aaa", str = "unsafe: {unsafe_variable}")]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the attribute macro `pyclass` (in Nightly builds, run with -Z macro-backtrace for more info)

error: The format string syntax is incompatible with any renaming via `name` or `rename_all`
   --> tests/ui/invalid_pyclass_args.rs:140:1
    |
140 | #[pyclass(name = "aaa", str = "unsafe: {unsafe_variable}")]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the attribute macro `pyclass` (in Nightly builds, run with -Z macro-backtrace for more info)

error: The format string syntax is incompatible with any renaming via `name` or `rename_all`
   --> tests/ui/invalid_pyclass_args.rs:145:1
    |
145 | #[pyclass(str = "unsafe: {unsafe_variable}")]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the attribute macro `pyclass` (in Nightly builds, run with -Z macro-backtrace for more info)

error: The format string syntax is incompatible with any renaming via `name` or `rename_all`
   --> tests/ui/invalid_pyclass_args.rs:151:1
    |
151 | #[pyclass(rename_all = "SCREAMING_SNAKE_CASE", str = "{a_a}, {b_b}, {c_d_e}")]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the attribute macro `pyclass` (in Nightly builds, run with -Z macro-backtrace for more info)

error: No member found, you must provide a named or positionally specified member.
   --> tests/ui/invalid_pyclass_args.rs:158:19
    |
158 | #[pyclass(str = "{:?}")]
    |                   ^

error: No member found, you must provide a named or positionally specified member.
   --> tests/ui/invalid_pyclass_args.rs:165:19
    |
165 | #[pyclass(str = "{}")]
    |                   ^

error: The format string syntax cannot be used with enums
   --> tests/ui/invalid_pyclass_args.rs:172:1
    |
172 | #[pyclass(eq, str = "Stuff...")]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the attribute macro `pyclass` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0592]: duplicate definitions with name `__pymethod___richcmp____`
  --> tests/ui/invalid_pyclass_args.rs:38:1
   |
38 | #[pyclass(eq)]
   | ^^^^^^^^^^^^^^ duplicate definitions for `__pymethod___richcmp____`
...
42 | #[pymethods]
   | ------------ other definition for `__pymethod___richcmp____`
   |
   = note: this error originates in the attribute macro `pyclass` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0592]: duplicate definitions with name `__pymethod___hash____`
  --> tests/ui/invalid_pyclass_args.rs:65:1
   |
65 | #[pyclass(frozen, eq, hash)]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `__pymethod___hash____`
...
69 | #[pymethods]
   | ------------ other definition for `__pymethod___hash____`
   |
   = note: this error originates in the attribute macro `pyclass` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0592]: duplicate definitions with name `__pymethod___str____`
  --> tests/ui/invalid_pyclass_args.rs:90:1
   |
90 | #[pyclass(str)]
   | ^^^^^^^^^^^^^^^ duplicate definitions for `__pymethod___str____`
...
99 | #[pymethods]
   | ------------ other definition for `__pymethod___str____`
   |
   = note: this error originates in the attribute macro `pyclass` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0369]: binary operation `==` cannot be applied to type `&EqOptRequiresEq`
  --> tests/ui/invalid_pyclass_args.rs:35:11
   |
35 | #[pyclass(eq)]
   |           ^^
   |
note: an implementation of `PartialEq` might be missing for `EqOptRequiresEq`
  --> tests/ui/invalid_pyclass_args.rs:36:1
   |
36 | struct EqOptRequiresEq {}
   | ^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `EqOptRequiresEq` with `#[derive(PartialEq)]`
   |
36 + #[derive(PartialEq)]
37 | struct EqOptRequiresEq {}
   |

error[E0369]: binary operation `!=` cannot be applied to type `&EqOptRequiresEq`
  --> tests/ui/invalid_pyclass_args.rs:35:11
   |
35 | #[pyclass(eq)]
   |           ^^
   |
note: an implementation of `PartialEq` might be missing for `EqOptRequiresEq`
  --> tests/ui/invalid_pyclass_args.rs:36:1
   |
36 | struct EqOptRequiresEq {}
   | ^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `EqOptRequiresEq` with `#[derive(PartialEq)]`
   |
36 + #[derive(PartialEq)]
37 | struct EqOptRequiresEq {}
   |

error[E0034]: multiple applicable items in scope
  --> tests/ui/invalid_pyclass_args.rs:38:1
   |
38 | #[pyclass(eq)]
   | ^^^^^^^^^^^^^^ multiple `__pymethod___richcmp____` found
   |
note: candidate #1 is defined in an impl for the type `EqOptAndManualRichCmp`
  --> tests/ui/invalid_pyclass_args.rs:38:1
   |
38 | #[pyclass(eq)]
   | ^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `EqOptAndManualRichCmp`
  --> tests/ui/invalid_pyclass_args.rs:42:1
   |
42 | #[pymethods]
   | ^^^^^^^^^^^^
   = note: this error originates in the attribute macro `pyclass` which comes from the expansion of the attribute macro `pymethods` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0034]: multiple applicable items in scope
  --> tests/ui/invalid_pyclass_args.rs:42:1
   |
42 | #[pymethods]
   | ^^^^^^^^^^^^ multiple `__pymethod___richcmp____` found
   |
note: candidate #1 is defined in an impl for the type `EqOptAndManualRichCmp`
  --> tests/ui/invalid_pyclass_args.rs:38:1
   |
38 | #[pyclass(eq)]
   | ^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `EqOptAndManualRichCmp`
  --> tests/ui/invalid_pyclass_args.rs:42:1
   |
42 | #[pymethods]
   | ^^^^^^^^^^^^
   = note: this error originates in the attribute macro `pymethods` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `HashOptRequiresHash: Hash` is not satisfied
  --> tests/ui/invalid_pyclass_args.rs:57:23
   |
57 | #[pyclass(frozen, eq, hash)]
   |                       ^^^^ the trait `Hash` is not implemented for `HashOptRequiresHash`
   |
help: consider annotating `HashOptRequiresHash` with `#[derive(Hash)]`
   |
59 + #[derive(Hash)]
60 | struct HashOptRequiresHash;
   |

error[E0034]: multiple applicable items in scope
  --> tests/ui/invalid_pyclass_args.rs:65:1
   |
65 | #[pyclass(frozen, eq, hash)]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `__pymethod___hash____` found
   |
note: candidate #1 is defined in an impl for the type `HashOptAndManualHash`
  --> tests/ui/invalid_pyclass_args.rs:65:1
   |
65 | #[pyclass(frozen, eq, hash)]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `HashOptAndManualHash`
  --> tests/ui/invalid_pyclass_args.rs:69:1
   |
69 | #[pymethods]
   | ^^^^^^^^^^^^
   = note: this error originates in the attribute macro `pyclass` which comes from the expansion of the attribute macro `pymethods` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0034]: multiple applicable items in scope
  --> tests/ui/invalid_pyclass_args.rs:69:1
   |
69 | #[pymethods]
   | ^^^^^^^^^^^^ multiple `__pymethod___hash____` found
   |
note: candidate #1 is defined in an impl for the type `HashOptAndManualHash`
  --> tests/ui/invalid_pyclass_args.rs:65:1
   |
65 | #[pyclass(frozen, eq, hash)]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `HashOptAndManualHash`
  --> tests/ui/invalid_pyclass_args.rs:69:1
   |
69 | #[pymethods]
   | ^^^^^^^^^^^^
   = note: this error originates in the attribute macro `pymethods` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0034]: multiple applicable items in scope
  --> tests/ui/invalid_pyclass_args.rs:90:1
   |
90 | #[pyclass(str)]
   | ^^^^^^^^^^^^^^^ multiple `__pymethod___str____` found
   |
note: candidate #1 is defined in an impl for the type `StrOptAndManualStr`
  --> tests/ui/invalid_pyclass_args.rs:90:1
   |
90 | #[pyclass(str)]
   | ^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `StrOptAndManualStr`
  --> tests/ui/invalid_pyclass_args.rs:99:1
   |
99 | #[pymethods]
   | ^^^^^^^^^^^^
   = note: this error originates in the attribute macro `pyclass` which comes from the expansion of the attribute macro `pymethods` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0034]: multiple applicable items in scope
  --> tests/ui/invalid_pyclass_args.rs:99:1
   |
99 | #[pymethods]
   | ^^^^^^^^^^^^ multiple `__pymethod___str____` found
   |
note: candidate #1 is defined in an impl for the type `StrOptAndManualStr`
  --> tests/ui/invalid_pyclass_args.rs:90:1
   |
90 | #[pyclass(str)]
   | ^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `StrOptAndManualStr`
  --> tests/ui/invalid_pyclass_args.rs:99:1
   |
99 | #[pymethods]
   | ^^^^^^^^^^^^
   = note: this error originates in the attribute macro `pymethods` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0609]: no field `aaaa` on type `&Point`
   --> tests/ui/invalid_pyclass_args.rs:114:22
    |
114 | #[pyclass(str = "X: {aaaa}, Y: {y}, Z: {z}")]
    |                      ^^^^ unknown field
    |
    = note: available fields are: `x`, `y`, `z`

error[E0609]: no field `zzz` on type `&Point2`
   --> tests/ui/invalid_pyclass_args.rs:122:40
    |
122 | #[pyclass(str = "X: {x}, Y: {y}}}, Z: {zzz}")]
    |                                        ^^^ unknown field
    |
    = note: available fields are: `x`, `y`, `z`

error[E0609]: no field `162543` on type `&Coord3`
   --> tests/ui/invalid_pyclass_args.rs:130:24
    |
130 | #[pyclass(str = "{0}, {162543}, {2}")]
    |                        ^^^^^^ unknown field
    |
    = note: available fields are: `0`, `1`, `2`
