error: #[classattr] can only have one argument (of type pyo3::Python)
  --> tests/ui/invalid_pymethods.rs:10:35
   |
10 |     fn class_attr_with_args(_foo: i32) {}
   |                                   ^^^

error: `#[classattr]` does not take any arguments
  --> tests/ui/invalid_pymethods.rs:15:5
   |
15 |     #[classattr(foobar)]
   |     ^^^^^^^^^^^^^^^^^^^^

error: static method needs #[staticmethod] attribute
  --> tests/ui/invalid_pymethods.rs:21:5
   |
21 |     fn staticmethod_without_attribute() {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: unexpected receiver
  --> tests/ui/invalid_pymethods.rs:27:35
   |
27 |     fn staticmethod_with_receiver(&self) {}
   |                                   ^^^^^

error: Expected `&Bound<PyType>` or `Py<PyType>` as the first argument to `#[classmethod]`
  --> tests/ui/invalid_pymethods.rs:33:33
   |
33 |     fn classmethod_with_receiver(&self) {}
   |                                 ^^^^^^^

error: Expected `&Bound<PyType>` or `Py<PyType>` as the first argument to `#[classmethod]`
  --> tests/ui/invalid_pymethods.rs:39:36
   |
39 |     fn classmethod_missing_argument() -> Self {
   |                                    ^^

error: expected receiver for `#[getter]`
  --> tests/ui/invalid_pymethods.rs:55:5
   |
55 |     fn getter_without_receiver() {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: expected receiver for `#[setter]`
  --> tests/ui/invalid_pymethods.rs:61:5
   |
61 |     fn setter_without_receiver() {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: static method needs #[staticmethod] attribute
  --> tests/ui/invalid_pymethods.rs:67:5
   |
67 |     fn text_signature_on_call() {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: `text_signature` not allowed with `getter`
  --> tests/ui/invalid_pymethods.rs:73:12
   |
73 |     #[pyo3(text_signature = "()")]
   |            ^^^^^^^^^^^^^^

error: `text_signature` not allowed with `setter`
  --> tests/ui/invalid_pymethods.rs:80:12
   |
80 |     #[pyo3(text_signature = "()")]
   |            ^^^^^^^^^^^^^^

error: `text_signature` not allowed with `classattr`
  --> tests/ui/invalid_pymethods.rs:87:12
   |
87 |     #[pyo3(text_signature = "()")]
   |            ^^^^^^^^^^^^^^

error: expected a string literal or `None`
  --> tests/ui/invalid_pymethods.rs:93:30
   |
93 |     #[pyo3(text_signature = 1)]
   |                              ^

error: `text_signature` may only be specified once
   --> tests/ui/invalid_pymethods.rs:100:12
    |
100 |     #[pyo3(text_signature = None)]
    |            ^^^^^^^^^^^^^^^^^^^^^

error: `signature` not allowed with `getter`
   --> tests/ui/invalid_pymethods.rs:107:12
    |
107 |     #[pyo3(signature = ())]
    |            ^^^^^^^^^

error: `signature` not allowed with `setter`
   --> tests/ui/invalid_pymethods.rs:114:12
    |
114 |     #[pyo3(signature = ())]
    |            ^^^^^^^^^

error: `signature` not allowed with `classattr`
   --> tests/ui/invalid_pymethods.rs:121:12
    |
121 |     #[pyo3(signature = ())]
    |            ^^^^^^^^^

error: `#[new]` may not be combined with `#[classmethod]` `#[staticmethod]`, `#[classattr]`, `#[getter]`, and `#[setter]`
   --> tests/ui/invalid_pymethods.rs:127:7
    |
127 |       #[new]
    |  _______^
128 | |     #[classmethod]
129 | |     #[staticmethod]
130 | |     #[classattr]
131 | |     #[getter(x)]
132 | |     #[setter(x)]
    | |____________^

error: `#[new]` does not take any arguments
       = help: did you mean `#[new] #[pyo3(signature = ())]`?
   --> tests/ui/invalid_pymethods.rs:138:7
    |
138 |     #[new(signature = ())]
    |       ^^^^^^^^^^^^^^^^^^^

error: `#[new]` does not take any arguments
       = note: this was previously accepted and ignored
   --> tests/ui/invalid_pymethods.rs:144:11
    |
144 |     #[new = ()] // in this form there's no suggestion to move arguments to `#[pyo3()]` attribute
    |           ^

error: `#[classmethod]` does not take any arguments
       = help: did you mean `#[classmethod] #[pyo3(signature = ())]`?
   --> tests/ui/invalid_pymethods.rs:150:7
    |
150 |     #[classmethod(signature = ())]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: `#[staticmethod]` does not take any arguments
       = help: did you mean `#[staticmethod] #[pyo3(signature = ())]`?
   --> tests/ui/invalid_pymethods.rs:156:7
    |
156 |     #[staticmethod(signature = ())]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: `#[classattr]` does not take any arguments
       = help: did you mean `#[classattr] #[pyo3(signature = ())]`?
   --> tests/ui/invalid_pymethods.rs:162:7
    |
162 |     #[classattr(signature = ())]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^

error: Python functions cannot have generic type parameters
   --> tests/ui/invalid_pymethods.rs:168:23
    |
168 |     fn generic_method<T>(_value: T) {}
    |                       ^

error: Python functions cannot have `impl Trait` arguments
   --> tests/ui/invalid_pymethods.rs:173:49
    |
173 |     fn impl_trait_method_first_arg(_impl_trait: impl AsRef<PyAny>) {}
    |                                                 ^^^^^^^^^^^^^^^^^

error: Python functions cannot have `impl Trait` arguments
   --> tests/ui/invalid_pymethods.rs:178:57
    |
178 |     fn impl_trait_method_second_arg(&self, _impl_trait: impl AsRef<PyAny>) {}
    |                                                         ^^^^^^^^^^^^^^^^^

error: `pass_module` cannot be used on Python methods
   --> tests/ui/invalid_pymethods.rs:183:12
    |
183 |     #[pyo3(pass_module)]
    |            ^^^^^^^^^^^

error: Python objects are shared, so 'self' cannot be moved out of the Python interpreter.
       Try `&self`, `&mut self, `slf: PyRef<'_, Self>` or `slf: PyRefMut<'_, Self>`.
   --> tests/ui/invalid_pymethods.rs:189:29
    |
189 |     fn method_self_by_value(self) {}
    |                             ^^^^

error: macros cannot be used as items in `#[pymethods]` impl blocks
       = note: this was previously accepted and ignored
   --> tests/ui/invalid_pymethods.rs:198:5
    |
198 |     macro_invocation!();
    |     ^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `i32: From<BoundRef<'_, '_, PyType>>` is not satisfied
  --> tests/ui/invalid_pymethods.rs:47:45
   |
47 |     fn classmethod_wrong_first_argument(_x: i32) -> Self {
   |                                             ^^^ the trait `From<BoundRef<'_, '_, PyType>>` is not implemented for `i32`
   |
   = help: the following other types implement trait `From<T>`:
             `i32` implements `From<bool>`
             `i32` implements `From<i16>`
             `i32` implements `From<i8>`
             `i32` implements `From<u16>`
             `i32` implements `From<u8>`
   = note: required for `BoundRef<'_, '_, PyType>` to implement `Into<i32>`
