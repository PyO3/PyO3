error: getter function can only have one argument (of type pyo3::Python)
  --> tests/ui/invalid_property_args.rs:10:56
   |
10 |     fn getter_with_arg(&self, _py: Python<'_>, _index: u32) {}
   |                                                        ^^^

error: setter function expected to have one argument
  --> tests/ui/invalid_property_args.rs:19:8
   |
19 |     fn setter_with_no_arg(&mut self, _py: Python<'_>) {}
   |        ^^^^^^^^^^^^^^^^^^

error: setter function can have at most two arguments ([pyo3::Python,] and value)
  --> tests/ui/invalid_property_args.rs:25:79
   |
25 |     fn setter_with_too_many_args(&mut self, _py: Python<'_>, _foo: u32, _bar: u32) {}
   |                                                                               ^^^

error: `get` and `set` with tuple struct fields require `name`
  --> tests/ui/invalid_property_args.rs:29:50
   |
29 | struct TupleGetterSetterNoName(#[pyo3(get, set)] i32);
   |                                                  ^^^

error: `get` may only be specified once
  --> tests/ui/invalid_property_args.rs:32:32
   |
32 | struct MultipleGet(#[pyo3(get, get)] i32);
   |                                ^^^

error: `set` may only be specified once
  --> tests/ui/invalid_property_args.rs:35:32
   |
35 | struct MultipleSet(#[pyo3(set, set)] i32);
   |                                ^^^

error: `name` may only be specified once
  --> tests/ui/invalid_property_args.rs:38:42
   |
38 | struct MultipleName(#[pyo3(name = "foo", name = "bar")] i32);
   |                                          ^^^^^^^^^^^^

error: `name` is useless without `get` or `set`
  --> tests/ui/invalid_property_args.rs:41:33
   |
41 | struct NameWithoutGetSet(#[pyo3(name = "value")] i32);
   |                                 ^^^^^^^^^^^^^^

error[E0277]: `PhantomData<i32>` cannot be converted to a Python object
  --> tests/ui/invalid_property_args.rs:46:12
   |
46 |     value: ::std::marker::PhantomData<i32>,
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by `#[pyo3(get)]` to create a readable property from a field of type `PhantomData<i32>`
   |
   = help: the trait `IntoPyObject<'_>` is not implemented for `PhantomData<i32>`
   = note: implement `IntoPyObject` for `&PhantomData<i32>` or `IntoPyObject + Clone` for `PhantomData<i32>` to define the conversion
   = help: the following other types implement trait `IntoPyObject<'py>`:
             &&'a T
             &&OsStr
             &&Path
             &&str
             &'a (T0, T1)
             &'a (T0, T1, T2)
             &'a (T0, T1, T2, T3)
             &'a (T0, T1, T2, T3, T4)
           and $N others
   = note: required for `PhantomData<i32>` to implement `for<'py> PyO3GetField<'py>`
note: required by a bound in `PyClassGetterGenerator::<ClassT, FieldT, Offset, false, false, false, false, false>::generate`
  --> src/impl_/pyclass.rs
   |
   |     pub const fn generate(&self, _name: &'static CStr, _doc: &'static CStr) -> PyMethodDefType
   |                  -------- required by a bound in this associated function
...
   |         for<'py> FieldT: PyO3GetField<'py>,
   |                          ^^^^^^^^^^^^^^^^^ required by this bound in `PyClassGetterGenerator::<ClassT, FieldT, Offset, false, false, false, false, false>::generate`
