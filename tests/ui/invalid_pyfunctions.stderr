error: Python functions cannot have generic type parameters
 --> tests/ui/invalid_pyfunctions.rs:5:21
  |
5 | fn generic_function<T>(_value: T) {}
  |                     ^

error: Python functions cannot have `impl Trait` arguments
 --> tests/ui/invalid_pyfunctions.rs:8:37
  |
8 | fn impl_trait_function(_impl_trait: impl AsRef<PyAny>) {}
  |                                     ^^^^

error: wildcard argument names are not supported
  --> tests/ui/invalid_pyfunctions.rs:11:22
   |
11 | fn wildcard_argument(_: i32) {}
   |                      ^

error: destructuring in arguments is not supported
  --> tests/ui/invalid_pyfunctions.rs:14:26
   |
14 | fn destructured_argument((_a, _b): (i32, i32)) {}
   |                          ^^^^^^^^

error: required arguments after an `Option<_>` argument are ambiguous
       = help: add a `#[pyo3(signature)]` annotation on this function to unambiguously specify the default values for all optional parameters
  --> tests/ui/invalid_pyfunctions.rs:17:63
   |
17 | fn function_with_required_after_option(_opt: Option<i32>, _x: i32) {}
   |                                                               ^^^

error: args cannot be optional
  --> tests/ui/invalid_pyfunctions.rs:21:32
   |
21 | fn function_with_optional_args(args: Option<Bound<'_, PyTuple>>) {
   |                                ^^^^

error: kwargs must be Option<_>
  --> tests/ui/invalid_pyfunctions.rs:27:34
   |
27 | fn function_with_required_kwargs(kwargs: Bound<'_, PyDict>) {
   |                                  ^^^^^^

error: expected `&PyModule` or `Py<PyModule>` as first argument with `pass_module`
  --> tests/ui/invalid_pyfunctions.rs:32:37
   |
32 | fn pass_module_but_no_arguments<'py>() {}
   |                                     ^^

error: GIL cannot be held in function annotated with `allow_threads`
  --> tests/ui/invalid_pyfunctions.rs:43:32
   |
43 | fn allow_threads_with_gil(_py: Python<'_>) {}
   |                                ^^^^^^

error[E0277]: the trait bound `&str: From<BoundRef<'_, '_, pyo3::prelude::PyModule>>` is not satisfied
  --> tests/ui/invalid_pyfunctions.rs:36:14
   |
36 |     _string: &str,
   |              ^ the trait `From<BoundRef<'_, '_, pyo3::prelude::PyModule>>` is not implemented for `&str`, which is required by `BoundRef<'_, '_, pyo3::prelude::PyModule>: Into<_>`
   |
   = help: the following other types implement trait `From<T>`:
             <String as From<char>>
             <String as From<Box<str>>>
             <String as From<Cow<'a, str>>>
             <String as From<&str>>
             <String as From<&mut str>>
             <String as From<&String>>
   = note: required for `BoundRef<'_, '_, pyo3::prelude::PyModule>` to implement `Into<&str>`

error[E0277]: `*mut pyo3::Python<'static>` cannot be shared between threads safely
  --> tests/ui/invalid_pyfunctions.rs:45:1
   |
45 | #[pyfunction(allow_threads)]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut pyo3::Python<'static>` cannot be shared between threads safely
   |
   = help: within `&pyo3::Bound<'_, pyo3::PyAny>`, the trait `Sync` is not implemented for `*mut pyo3::Python<'static>`, which is required by `{closure@$DIR/tests/ui/invalid_pyfunctions.rs:45:1: 45:29}: Ungil`
note: required because it appears within the type `PhantomData<*mut pyo3::Python<'static>>`
  --> $RUST/core/src/marker.rs
   |
   | pub struct PhantomData<T: ?Sized>;
   |            ^^^^^^^^^^^
note: required because it appears within the type `impl_::not_send::NotSend`
  --> src/impl_/not_send.rs
   |
   | pub(crate) struct NotSend(PhantomData<*mut Python<'static>>);
   |                   ^^^^^^^
   = note: required because it appears within the type `(&pyo3::gil::GILGuard, impl_::not_send::NotSend)`
note: required because it appears within the type `PhantomData<(&pyo3::gil::GILGuard, impl_::not_send::NotSend)>`
  --> $RUST/core/src/marker.rs
   |
   | pub struct PhantomData<T: ?Sized>;
   |            ^^^^^^^^^^^
note: required because it appears within the type `pyo3::Python<'_>`
  --> src/marker.rs
   |
   | pub struct Python<'py>(PhantomData<(&'py GILGuard, NotSend)>);
   |            ^^^^^^
note: required because it appears within the type `pyo3::Bound<'_, pyo3::PyAny>`
  --> src/instance.rs
   |
   | pub struct Bound<'py, T>(Python<'py>, ManuallyDrop<Py<T>>);
   |            ^^^^^
   = note: required because it appears within the type `&pyo3::Bound<'_, pyo3::PyAny>`
   = note: required for `&&pyo3::Bound<'_, pyo3::PyAny>` to implement `Send`
note: required because it's used within this closure
  --> tests/ui/invalid_pyfunctions.rs:45:1
   |
45 | #[pyfunction(allow_threads)]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: required for `{closure@$DIR/tests/ui/invalid_pyfunctions.rs:45:1: 45:29}` to implement `Ungil`
note: required by a bound in `pyo3::Python::<'py>::allow_threads`
  --> src/marker.rs
   |
   |     pub fn allow_threads<T, F>(self, f: F) -> T
   |            ------------- required by a bound in this associated function
   |     where
   |         F: Ungil + FnOnce() -> T,
   |            ^^^^^ required by this bound in `Python::<'py>::allow_threads`
   = note: this error originates in the attribute macro `pyfunction` (in Nightly builds, run with -Z macro-backtrace for more info)
