error: GIL token cannot be passed to async function
 --> tests/ui/invalid_async_pyfunction.rs:4:30
  |
4 | async fn async_with_gil(_py: Python<'_>) {}
  |                              ^^^^^^

error: `cancel_handle` may only be specified once per argument
  --> tests/ui/invalid_async_pyfunction.rs:10:55
   |
10 | async fn cancel_handle_repeated(#[pyo3(cancel_handle, cancel_handle)] _param: i32) {}
   |                                                       ^^^^^^^^^^^^^

error: `cancel_handle` may only be specified once
  --> tests/ui/invalid_async_pyfunction.rs:15:28
   |
15 |     #[pyo3(cancel_handle)] _param2: i32,
   |                            ^^^^^^^

error: `cancel_handle` attribute can only be used with `async fn`
  --> tests/ui/invalid_async_pyfunction.rs:20:53
   |
20 | fn cancel_handle_synchronous(#[pyo3(cancel_handle)] _param: i32) {}
   |                                                     ^^^^^^

error: `from_py_with` and `cancel_handle` cannot be specified together
  --> tests/ui/invalid_async_pyfunction.rs:30:12
   |
30 |     #[pyo3(cancel_handle, from_py_with = "cancel_handle")] _param: pyo3::coroutine::CancelHandle,
   |            ^^^^^^^^^^^^^

error[E0277]: `*mut pyo3::Python<'static>` cannot be shared between threads safely
 --> tests/ui/invalid_async_pyfunction.rs:6:1
  |
6 | #[pyfunction(allow_threads)]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut pyo3::Python<'static>` cannot be shared between threads safely
  |
  = help: within `pyo3::Bound<'_, pyo3::PyAny>`, the trait `Sync` is not implemented for `*mut pyo3::Python<'static>`, which is required by `{async block@$DIR/tests/ui/invalid_async_pyfunction.rs:6:1: 6:29}: Send`
note: required because it appears within the type `PhantomData<*mut pyo3::Python<'static>>`
 --> $RUST/core/src/marker.rs
  |
  | pub struct PhantomData<T: ?Sized>;
  |            ^^^^^^^^^^^
note: required because it appears within the type `impl_::not_send::NotSend`
 --> src/impl_/not_send.rs
  |
  | pub(crate) struct NotSend(PhantomData<*mut Python<'static>>);
  |                   ^^^^^^^
  = note: required because it appears within the type `(&pyo3::gil::GILGuard, impl_::not_send::NotSend)`
note: required because it appears within the type `PhantomData<(&pyo3::gil::GILGuard, impl_::not_send::NotSend)>`
 --> $RUST/core/src/marker.rs
  |
  | pub struct PhantomData<T: ?Sized>;
  |            ^^^^^^^^^^^
note: required because it appears within the type `pyo3::Python<'_>`
 --> src/marker.rs
  |
  | pub struct Python<'py>(PhantomData<(&'py GILGuard, NotSend)>);
  |            ^^^^^^
note: required because it appears within the type `pyo3::Bound<'_, pyo3::PyAny>`
 --> src/instance.rs
  |
  | pub struct Bound<'py, T>(Python<'py>, ManuallyDrop<Py<T>>);
  |            ^^^^^
  = note: required for `&pyo3::Bound<'_, pyo3::PyAny>` to implement `Send`
note: required because it's used within this `async` fn body
 --> tests/ui/invalid_async_pyfunction.rs:7:52
  |
7 | async fn async_with_bound(_obj: &Bound<'_, PyAny>) {}
  |                                                    ^^
note: required because it's used within this `async` block
 --> tests/ui/invalid_async_pyfunction.rs:6:1
  |
6 | #[pyfunction(allow_threads)]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `new_coroutine`
 --> src/impl_/coroutine.rs
  |
  | pub fn new_coroutine<F, T, E>(
  |        ------------- required by a bound in this function
...
  |     F: Future<Output = Result<T, E>> + Send + Ungil + 'static,
  |                                        ^^^^ required by this bound in `new_coroutine`
  = note: this error originates in the attribute macro `pyfunction` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> tests/ui/invalid_async_pyfunction.rs:22:1
   |
22 | #[pyfunction]
   | ^^^^^^^^^^^^^
   | |
   | expected `i32`, found `CancelHandle`
   | arguments to this function are incorrect
   |
note: function defined here
  --> tests/ui/invalid_async_pyfunction.rs:23:10
   |
23 | async fn cancel_handle_wrong_type(#[pyo3(cancel_handle)] _param: i32) {}
   |          ^^^^^^^^^^^^^^^^^^^^^^^^                        -----------
   = note: this error originates in the attribute macro `pyfunction` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CancelHandle: PyClass` is not satisfied
  --> tests/ui/invalid_async_pyfunction.rs:26:50
   |
26 | async fn missing_cancel_handle_attribute(_param: pyo3::coroutine::CancelHandle) {}
   |                                                  ^^^^ the trait `PyClass` is not implemented for `CancelHandle`, which is required by `CancelHandle: PyFunctionArgument<'_, '_>`
   |
   = help: the trait `PyClass` is implemented for `pyo3::coroutine::Coroutine`
   = note: required for `CancelHandle` to implement `FromPyObject<'_>`
   = note: required for `CancelHandle` to implement `FromPyObjectBound<'_, '_>`
   = note: required for `CancelHandle` to implement `PyFunctionArgument<'_, '_>`
note: required by a bound in `extract_argument`
  --> src/impl_/extract_argument.rs
   |
   | pub fn extract_argument<'a, 'py, T>(
   |        ---------------- required by a bound in this function
...
   |     T: PyFunctionArgument<'a, 'py>,
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `extract_argument`

error[E0277]: the trait bound `CancelHandle: Clone` is not satisfied
  --> tests/ui/invalid_async_pyfunction.rs:26:50
   |
26 | async fn missing_cancel_handle_attribute(_param: pyo3::coroutine::CancelHandle) {}
   |                                                  ^^^^ the trait `Clone` is not implemented for `CancelHandle`, which is required by `CancelHandle: PyFunctionArgument<'_, '_>`
   |
   = help: the following other types implement trait `PyFunctionArgument<'a, 'py>`:
             Option<&'a pyo3::Bound<'py, T>>
             &'a pyo3::Bound<'py, T>
             &'a pyo3::coroutine::Coroutine
             &'a mut pyo3::coroutine::Coroutine
   = note: required for `CancelHandle` to implement `FromPyObject<'_>`
   = note: required for `CancelHandle` to implement `FromPyObjectBound<'_, '_>`
   = note: required for `CancelHandle` to implement `PyFunctionArgument<'_, '_>`
note: required by a bound in `extract_argument`
  --> src/impl_/extract_argument.rs
   |
   | pub fn extract_argument<'a, 'py, T>(
   |        ---------------- required by a bound in this function
...
   |     T: PyFunctionArgument<'a, 'py>,
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `extract_argument`
